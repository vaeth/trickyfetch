#!/bin/sh
# This file is sourced by trickyfetch.
# It should be in POSIX sh and do nothing else than set the following
# variables and functions

# TRICKYFETCH_GETDELTA: If nonempty, use getdelta
TRICKYFETCH_GETDELTA=

# If nonempty, the function in the following variable is called to log fetches.
# Depending on whether the filename needs to be changed it is called with
# one or two arguments.
LOGGING_FETCH=LoggingFetch

# We must define the corresponding function:
LoggingFetch() {
	if [ -n "${2:++}" ]
	then	loggingfetchsave=' -> '$2
	else	loggingfetchsave=
	fi
	case ${TRICKYLOG-} in
	/*)
		Echo "$1$loggingfetchsave" >>"$TRICKYLOG";;
	esac
	logger -p user.notice -t trickyfetch "$1$loggingfetchsave"
}
# For backward compatibility, the above function respects TRICKYLOG.
# It is recommended to use only the system logger instead:
# TRICKYLOG=
# However, you might instead also want to use something like the following to
# log into a file in portage's tempdir (choose a directory which is not
# world-writable to avoid symlink attacks!). Be also aware that the above
# implementation does not care about parallelity.
# : ${PORTAGE_TMPDIR:=${EPREFIX%/}/var/tmp}
# : ${TRICKYLOG:=$PORTAGE_TMPDIR/portage/trickyfetch.log}

# If nonempty, the function in the following variable is called to log errors.
# The argument is the error message.
LOGGING_ERROR='logger -p user.err -t trickyfetch'

# If WGET is nonempty, this is used instead of the default value
# 'wget -t 1 -T 15 --passive-ftp --no-glob'.
# The arguments are -P $DISTDIR -- $URI or -O $DISTDIR/$FILE -- $URI, resp.
WGET=
