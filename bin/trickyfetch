#!/usr/bin/env sh
set -u
# For security reasons, we reset all variables containing commands
# which should be set in the configfile
LOGGING_FETCH=
LOGGING_ERROR=

# Force umask to a sane value. Use trickyfetch.conf to override this
umask 022

# Source the configfile, looking for it first in /etc then in $PATH.
# By POSIX, the shell exits if this file does not exist
PATH=/etc${PATH:+:}${PATH-} . trickyfetch.conf

export URI DISTDIR FILE
URI=${1-}
DISTDIR=${2-}
FILE=${3-}

Echo() {
	printf '%s\n' "$*"
}

case ${NOCOLOR:-n} in
[fFnN]*|[oO][fF]*|0|-)
Info() {
	printf '\033[1;35m>>> %s\033[0m: \033[1;32m%s\033[0m\n' "${0##*/}" "$*"
};;
*)
Info() {
	Echo ">>> ${0##*/}: $*"
};;
esac

Error() {
	Echo "${0##*/}: $*" >&2
	${LOGGING_ERROR:-:} "$*"
	return 1
}

Fatal() {
	Error "fatal: $*"
	exit
}

if [ -z "${DISTDIR:++}" ] || ! test -d "$DISTDIR"
then	Info 'Called with wrong arguments'
	Fatal "second argument \"$DISTDIR\" is not a directory"
fi

MvDir() {
	test -d "$1" || return 0
	mv_dest=$DISTDIR/${1##*/}
	if ! test -d "$mv_dest"
	then	mv -- "$1" "$mv_dest" || Error "failed moving $1"
		return
	fi
	test -d "$mv_dest" || continue
	mv_match=:
	for mv_i in "$1"/*
	do	mv_name=${mv_i##*/}
		case $mv_name in
		.|..)	continue;;
		esac
		test -e "$mv_i" || continue
		if test -e "$mv_dest/$mv_name"
		then	mv_match=false
			continue
		fi
		mv -- "$mv_i" "$mv_dest" || mv_match=false
	done
	if $mv_match && test -L "$1"
	then	rm -- "$1" && return
	else	rmdir -- "$1" && return
	fi
	Error "failed moving dir-content of $1/*"
}

# First argument must be one of
#  Info  Verbose
#  :     Non-verbose
# Second argument is the filename (without directory)
# The other arguments are candidates for dirs possibly containing the filename.
# The first found file/dir is moved to $DISTDIR.
# Success if destination exists or could be created.

Mv() {
	mv_info=$1
	mv_name=$2
	shift 2
	mv_dest=$DISTDIR/$mv_name
	! test -e "$mv_dest" || return 0
	for mv_i
	do	test -d "$mv_i" || continue
		for mv_j in "$mv_i/$mv_name" "$mv_i/${mv_name%.__download__}"
		do	test -e "$mv_j" || continue
			$mv_info "Moving source from $mv_j"
			mv -- "$mv_j" "$mv_dest" && return 0
			Error "failed moving $mv_j"
		done
	done
	return 1
}

# These tasks are alway done, even if no file should need to be fetched:

# A somewhat special treatment is needed for $DISTDIR/*-src, because the
# files in these directories are not fetched by
# "emerge -feD --with-bdeps=y @world".
# Therefore, trickyfetch tacitly moves back these directories from .obsolete
# (because it was probably moved there by the user by "accident" with the
# command "mv -i * .obsolete").
# In this way the treatment of .obsolete differs from .save*:
# Since .save* is meant for manual user interaction, the user certainly
# has a reason if he moves some *-src there, so trickyfetch should better
# not interfere.

for i in "$DISTDIR/.obsolete"/*-src
do	test -d "$i" && MvDir "$i"
done

# The files in .restricted are always linked if they don't exist

for i in "$DISTDIR/.restricted"/*
do	test -e "$i" || continue
	name=${i##*/}
	Mv : "$name" "$DISTDIR"/.obsolete "$DISTDIR"/.save* \
		|| ln -s -- "$i" "$DISTDIR/$name"
done

# An empty filename is something which we assume is already downloaded

[ -z "${FILE:++}" ] && exit

# Now trickyfetch moves the files if possible
# Finish if at least one move was successful

Mv Info "$FILE" "$DISTDIR"/.obsolete "$DISTDIR"/.save* && exit

# Now we log, since we really have to fetch something and not only to move:

if [ -n "$LOGGING_FETCH" ]
then	if [ x"${URI##*/}" = x"$FILE" ]
	then	$LOGGING_FETCH "$URI"
	else	$LOGGING_FETCH "$URI" "$FILE"
	fi
fi

# If LOCALFETCHCOMMAND exists, use it:

if [ -n "${LOCALFETCHCOMMAND:++}" ]
then	Info "Using \$LOCALFETCHCOMMAND for $URI"
	eval "$LOCALFETCHCOMMAND"
	exit
fi

# /* Optional getdelta support
if [ -n "${TRICKYFETCH_GETDELTA:++}" ]
then

ReadMirror() {
	[ -n "${GENTOO_MIRRORS++}" ] && return
	if eix_functions=`eix-functions.sh 2>/dev/null`
	then	eval "$eix_functions"
		ReadVar GENTOO_MIRRORS GENTOO_MIRRORS
	else	GENTOO_MIRRORS=`portageq gentoo_mirrors`
	fi
}

GoodDeltaMirror() {
	ReadMirror
	retmirror=0
	for mirror in $GENTOO_MIRRORS
	do	case $URI in
		*"${mirror#*://}"*)
			return $retmirror;;
		esac
		retmirror=1
	done
}

IsAMatch() {
	for isamask
	do	case $FILE in
		$isamask)
			return 0;;
		esac
	done
	return 1
}

DeltaExcluded() {
	[ -n "${DELTA_EXCLUDE:++}" ] && IsAMatch `find -L "$DELTA_EXCLUDE" \
		'(' '(' -name '.*' -o -name '*~' ')' -prune ')' -o \
		-type f -exec cat '{}' '+'`
}

set -f
if IsAMatch ${NODELTA-}
then	Info 'Not using getdelta since "${NODELTA-}" matches the filename'
elif ! command -v getdelta.sh >/dev/null 2>&1
then	Info 'Not using app-portage/getdelta since it is not installed'
elif test -e "$DISTDIR/.nodelta"
then	Info 'Not using getdelta since $DISTDIR/.nodelta exists'
elif ! GoodDeltaMirror
then	Info 'Not using getdelta since we are on a later GENTOO_MIRROR'
elif DeltaExcluded
then	Info 'Not using getdelta since filename matches in $DELTA_EXCLUDE'
else	Info "Calling getdelta to fetch $FILE"
	exec getdelta.sh "$URI" "$FILE"
	Fatal "could not execute getdelta.sh for $FILE"
fi

fi
# Optional getdelta support */

# The default wget is actually only the final fallback:

: ${WGET_EXTRA_OPTS:=}
: ${WGET:=wget -t 1 -T 15 --passive-ftp --no-glob $WGET_EXTRA_OPTS}
if [ x"${URI##*/}" = x"$FILE" ]
then	Info "Calling wget to fetch $FILE"
	eval $WGET -P \"\$DISTDIR\" $WGET_EXTRA_OPTS -- \"\$URI\"
else	Info "Calling wget -O $FILE"
	eval $WGET -O \"\$DISTDIR/\$FILE\" $WGET_EXTRA_OPTS -- \"\$URI\"
fi && exit 0
Error '$WGET for '"$FILE failed."
Error 'In some cases, it might help to set $WGET_EXTRA_OPTS appropriately,'
Error 'for instance (if you are willing to take the security risk):'
Error '	export WGET_EXTRA_OPTS=--no-check-certificate'
Error
exit 1
